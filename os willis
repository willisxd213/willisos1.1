<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Willis OS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            background-color: #1a202c;
            overflow: hidden;
        }
        #desktop {
            background: url('https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1920&q=80') no-repeat center center/cover;
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 40px;
        }
        .window {
            position: absolute;
            border: 1px solid #4a5568;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.5);
            background-color: #2d3748;
            color: #e2e8f0;
            display: none;
            min-width: 300px;
            min-height: 200px;
            resize: both;
            overflow: hidden;
            flex-direction: column;
            transition: width 0.2s ease, height 0.2s ease, top 0.2s ease, left 0.2s ease;
        }
        .title-bar {
            background-color: #1a202c;
            color: #cbd5e0;
            padding: 6px 10px;
            font-weight: bold;
            cursor: move;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top-left-radius: 7px;
            border-top-right-radius: 7px;
        }
        .window-controls { display: flex; gap: 6px; }
        .window-controls button {
            width: 18px; height: 18px; border-radius: 50%;
            border: none; color: #1a202c; font-weight: bold;
            line-height: 18px; text-align: center;
            cursor: pointer;
            display: flex; align-items: center; justify-content: center;
        }
        .close-btn { background-color: #ef4444; }
        .maximize-btn { background-color: #f59e0b; }
        .window-content { padding: 15px; flex-grow: 1; overflow: auto; }
        #taskbar {
            position: absolute; bottom: 0; left: 0; right: 0;
            height: 40px; background: rgba(26, 32, 44, 0.9);
            backdrop-filter: blur(10px); border-top: 1px solid #4a5568;
            display: flex; align-items: center; padding: 0 10px;
            color: white;
            z-index: 5000;
        }
        #start-button {
            background: #3b82f6; padding: 5px; border-radius: 5px; cursor: pointer;
            display: flex; align-items: center; justify-content: center;
        }
        #taskbar-apps { flex-grow: 1; display: flex; align-items: center; margin-left: 10px; }
        .taskbar-icon {
            background-color: rgba(255, 255, 255, 0.1);
            padding: 4px 8px;
            margin: 0 4px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }
        .taskbar-icon.active { border-bottom-color: #3b82f6; background-color: rgba(255, 255, 255, 0.2); }
        .desktop-icon {
            text-align: center; color: white; cursor: pointer;
            width: 90px; padding: 10px; border-radius: 6px;
        }
        .desktop-icon:hover, .start-menu-item:hover { background: rgba(255,255,255,0.1); }
        .desktop-icon svg { margin: 0 auto 5px auto; }

        /* --- Boot Screen Styles --- */
        #boot-screen {
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background-color: #111827; /* Dark background */
            display: grid;
            place-items: center;
            z-index: 10000;
            transition: opacity 1s ease-in-out;
        }
        .loader-container {
            position: relative; width: 200px; height: 200px;
            display: flex; justify-content: center; align-items: center;
        }
        .circle {
            width: 200px; height: 200px; background-color: #3B82F6;
            border-radius: 50%; position: absolute; transform: scale(0);
            animation: grow-circle 1s cubic-bezier(0.25, 1, 0.5, 1) forwards;
            overflow: hidden;
        }
        .text {
            color: #111827; font-size: 40px; font-weight: bold;
            opacity: 0; transform: translateY(20px);
            animation: fade-in-text 1s ease-out 0.7s forwards, change-text-color 0.5s linear 3s forwards;
            z-index: 10;
        }
        .flash {
            position: absolute; top: -50%; left: -50%; width: 200%; height: 200%;
            background: linear-gradient(45deg, rgba(255,255,255,0) 40%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 60%);
            transform: rotate(-45deg); opacity: 0;
            animation: light-sweep 1.2s cubic-bezier(0.4, 0, 0.2, 1) 2s forwards;
            z-index: 5;
        }
        @keyframes grow-circle { from { transform: scale(0); } to { transform: scale(1); } }
        @keyframes fade-in-text { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes light-sweep { 0% { opacity: 1; transform: rotate(-45deg); } 100% { opacity: 0; transform: rotate(315deg); } }
        @keyframes change-text-color { from { color: #111827; } to { color: #FFFFFF; } }
        
        #start-menu {
            position: absolute; bottom: 45px; left: 10px;
            background: rgba(45, 55, 72, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid #4a5568;
            border-radius: 8px;
            width: 250px;
            padding: 8px;
            z-index: 4999;
            display: none; /* Hidden by default */
        }
        .start-menu-item {
            padding: 8px 12px; border-radius: 6px;
            cursor: pointer; display: flex; align-items: center; gap: 10px;
        }
        .file-explorer-item {
            display: flex; align-items: center; gap: 8px; padding: 4px;
            border-radius: 4px; cursor: pointer;
        }
        .file-explorer-item:hover { background-color: rgba(255,255,255,0.1); }
        
        /* --- Terminal Styles --- */
        #terminal-content { font-family: 'Fira Code', monospace; }
        .prompt-color { color: #bb9af7; }
        .path-color { color: #7dcfff; }
        .terminal-input-line { display: flex; align-items: center; }
        #terminal-input { background: transparent; border: none; outline: none; color: #a9b1d6; flex-grow: 1; }
        .terminal-output .file { color: #9ece6a; }
        .terminal-output .directory { color: #7aa2f7; font-weight: bold; }
        
        .browser-btn, .media-btn {
            background-color: #4a5568; color: white;
            width: 2rem; height: 2rem; border-radius: 9999px;
            display: inline-flex; justify-content: center; align-items: center;
        }
        .browser-btn:hover, .media-btn:hover { background-color: #6b7280; }

        .window.fullscreen {
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100% !important;
            border-radius: 0;
            resize: none;
        }
        .ai-message { background-color: #374151; padding: 8px; border-radius: 8px; margin-bottom: 8px; }
        .user-message { background-color: #4b5563; padding: 8px; border-radius: 8px; margin-bottom: 8px; text-align: right; }
        #media-player-video { background-color: black; }
        
        /* DevTools Styles */
        .devtools-tabs button {
            padding: 8px 16px;
            border: none;
            background-color: transparent;
            color: #a9b1d6;
            cursor: pointer;
        }
        .devtools-tabs button.active {
            background-color: #414868;
            border-radius: 4px 4px 0 0;
        }
        .devtools-content {
            display: none;
        }
        .devtools-content.active {
            display: block;
        }
        .storage-table {
            width: 100%;
            border-collapse: collapse;
        }
        .storage-table th, .storage-table td {
            border: 1px solid #4a5568;
            padding: 8px;
            text-align: left;
        }
        .storage-table th {
            background-color: #1a202c;
        }
    </style>
</head>
<body class="bg-gray-800 overflow-hidden">

    <!-- Boot Screen -->
    <div id="boot-screen">
        <div class="loader-container">
            <div class="text">Willis</div>
            <div class="circle"><div class="flash"></div></div>
        </div>
    </div>

    <!-- Main OS Interface -->
    <div id="os-container" class="hidden">
        <div id="desktop" class="p-4 flex flex-col items-start content-start flex-wrap">
            <!-- Desktop Icons -->
            <div class="desktop-icon" data-app-id="explorer">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>
                <span>Explorer</span>
            </div>
            <div class="desktop-icon" data-app-id="terminal">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="4 17 10 11 4 5"></polyline><line x1="12" y1="19" x2="20" y2="19"></line></svg>
                <span>Terminal</span>
            </div>
            <div class="desktop-icon" data-app-id="browser">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>
                <span>Browser</span>
            </div>
             <div class="desktop-icon" data-app-id="media-player">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"></rect><line x1="7" y1="2" x2="7" y2="22"></line><line x1="17" y1="2" x2="17" y2="22"></line><line x1="2" y1="12" x2="22" y2="12"></line><line x1="2" y1="7" x2="7" y2="7"></line><line x1="2" y1="17" x2="7" y2="17"></line><line x1="17" y1="17" x2="22" y2="17"></line><line x1="17" y1="7" x2="22" y2="7"></line></svg>
                <span>Media Player</span>
            </div>
            <div class="desktop-icon" data-app-id="devtools">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l-2 2 2 2"></path><path d="M9 12l2 2-2 2"></path><path d="M15 12l-2 2 2 2"></path><path d="M19 12l2 2-2 2"></path><path d="M5 12l2-2-2-2"></path><path d="M9 12l-2-2 2-2"></path><path d="M15 12l2-2-2-2"></path><path d="M19 12l-2-2 2-2"></path></svg>
                <span>DevTools</span>
            </div>
        </div>

        <!-- App Windows -->
        <div id="settings" class="window" style="top: 10%; left: 10%; width: 500px; height: 350px;">
            <div class="title-bar" data-app-id="settings">
                <span>Settings</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="settings"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="settings">x</button>
                </div>
            </div>
            <div class="window-content space-y-4">
                 <div>
                    <label for="username-input" class="block text-sm font-medium text-gray-400">Username</label>
                    <input type="text" id="username-input" value="User" class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                </div>
                <div>
                    <label for="wallpaper-input" class="block text-sm font-medium text-gray-400">Wallpaper URL or Description</label>
                    <div class="flex items-center space-x-2 mt-1">
                        <input type="text" id="wallpaper-input" placeholder="e.g., 'a calm beach at sunset'" class="block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <button id="generate-wallpaper-btn" class="px-3 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 flex-shrink-0">✨ Generate</button>
                    </div>
                    <button id="set-wallpaper-btn" class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Set Wallpaper</button>
                </div>
            </div>
        </div>
        <div id="app-store" class="window" style="top: 20%; left: 30%; width: 700px; height: 500px;">
            <div class="title-bar" data-app-id="app-store">
                <span>App Store</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="app-store"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="app-store">x</button>
                </div>
            </div>
            <div class="window-content">
                <h1 class="text-2xl font-bold mb-4 text-blue-300">System Apps</h1>
                 <div class="p-4 border border-gray-600 rounded-lg flex items-center justify-between bg-gray-700 mb-2">
                    <div><h2 class="text-lg font-semibold">Notepad</h2></div>
                    <button data-app-id="notepad" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 app-launcher">Open</button>
                </div>
                <div class="p-4 border border-gray-600 rounded-lg flex items-center justify-between bg-gray-700 mb-2">
                    <div><h2 class="text-lg font-semibold">DevTools</h2></div>
                    <button data-app-id="devtools" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 app-launcher">Open</button>
                </div>
                <h1 class="text-2xl font-bold mb-4 text-blue-300">Internet</h1>
                 <div class="p-4 border border-gray-600 rounded-lg flex items-center justify-between bg-gray-700 mb-2">
                    <div><h2 class="text-lg font-semibold">Web Browser</h2></div>
                    <button data-app-id="browser" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 app-launcher">Open</button>
                </div>
                 <h1 class="text-2xl font-bold mb-4 text-blue-300">Media</h1>
                 <div class="p-4 border border-gray-600 rounded-lg flex items-center justify-between bg-gray-700 mb-2">
                    <div><h2 class="text-lg font-semibold">Media Player</h2></div>
                    <button data-app-id="media-player" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 app-launcher">Open</button>
                </div>
                <h1 class="text-2xl font-bold my-4 text-blue-300">Games</h1>
                <div class="p-4 border border-gray-600 rounded-lg flex items-center justify-between mt-4 bg-gray-700">
                    <div><h2 class="text-lg font-semibold">Super Smash Bros.</h2></div>
                    <button data-app-id="smash-bros" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 app-launcher">Play</button>
                </div>
            </div>
        </div>
        <div id="ai-assistant" class="window" style="top: 15%; left: 50%; width: 500px; height: 600px;">
            <div class="title-bar" data-app-id="ai-assistant">
                <span>AI Assistant</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="ai-assistant"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="ai-assistant">x</button>
                </div>
            </div>
            <div class="window-content p-2 flex flex-col">
                 <div id="ai-response-area" class="flex-grow bg-gray-800 p-4 rounded-md mb-4 overflow-y-auto h-64">
                    <p class="text-gray-400">Ask me anything...</p>
                </div>
                <div id="ai-loading-spinner" style="display: none; border-top-color: #3b82f6;" class="spinner w-8 h-8 mx-auto"></div>
                <textarea id="ai-prompt-input" class="w-full p-2 border border-gray-600 rounded-md bg-gray-700" placeholder="Enter your prompt here..."></textarea>
                <button id="submit-ai-prompt-btn" class="mt-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">✨ Ask AI</button>
            </div>
        </div>
        <div id="explorer" class="window" style="top: 15%; left: 15%; width: 600px; height: 400px;">
            <div class="title-bar" data-app-id="explorer">
                <span id="explorer-title">File Explorer</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="explorer"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="explorer">x</button>
                </div>
            </div>
            <div class="window-content" id="explorer-content"></div>
        </div>
        <div id="notepad" class="window" style="top: 25%; left: 25%; width: 500px; height: 450px;">
            <div class="title-bar" data-app-id="notepad">
                <span id="notepad-title">Notepad</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="notepad"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="notepad">x</button>
                </div>
            </div>
            <div class="window-content p-0 flex flex-col">
                <div class="bg-gray-700 p-1 flex space-x-2">
                    <button id="notepad-save-btn" class="text-sm px-2 py-1 bg-blue-600 rounded">Save</button>
                    <button id="notepad-summarize-btn" class="text-sm px-2 py-1 bg-purple-600 rounded">✨ Summarize</button>
                    <button id="notepad-continue-btn" class="text-sm px-2 py-1 bg-green-600 rounded">✨ Continue Writing</button>
                </div>
                <textarea id="notepad-textarea" class="w-full h-full bg-gray-800 text-white font-mono p-2 border-0 focus:ring-0 resize-none"></textarea>
            </div>
        </div>
        <div id="terminal" class="window" style="top: 30%; left: 35%; width: 600px; height: 350px;">
            <div class="title-bar" data-app-id="terminal">
                <span>Terminal</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="terminal"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="terminal">x</button>
                </div>
            </div>
            <div id="terminal-content" class="window-content bg-[#1a1b26] text-[#a9b1d6] p-2 flex flex-col flex-grow">
                <div id="terminal-output" class="flex-grow overflow-y-auto pr-2"></div>
                <div class="terminal-input-line mt-2">
                    <span class="prompt-color">user@willis</span><span class="text-gray-400">:</span><span id="terminal-path" class="path-color">~</span><span class="text-gray-400">$</span>
                    <input type="text" id="terminal-input" class="ml-2" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">
                </div>
            </div>
        </div>
        <div id="task-manager" class="window" style="top: 20%; left: 40%; width: 400px; height: 300px;">
            <div class="title-bar" data-app-id="task-manager">
                <span>Task Manager</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="task-manager"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="task-manager">x</button>
                </div>
            </div>
            <div class="window-content" id="task-manager-content"></div>
        </div>
        <div id="browser" class="window" style="top: 10%; left: 20%; width: 800px; height: 600px;">
            <div class="title-bar" data-app-id="browser">
                <span>Web Browser</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="browser"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="browser">x</button>
                </div>
            </div>
            <div class="window-content p-0 flex flex-col h-full">
                <!-- Top control bar -->
                <div class="bg-gray-700 p-1 flex items-center space-x-1 flex-wrap">
                    <!-- Navigation Buttons -->
                    <button class="browser-back browser-btn" title="Back"><i class="fas fa-arrow-left"></i></button>
                    <button class="browser-forward browser-btn" title="Forward"><i class="fas fa-arrow-right"></i></button>
                    <button class="browser-reload browser-btn" title="Reload"><i class="fas fa-redo"></i></button>
                    
                    <!-- URL Address Bar -->
                    <input type="text" class="browser-url flex-grow rounded-full px-3 py-1 bg-gray-800 border border-gray-600" value="https://www.wikipedia.org/">
                    
                    <!-- Open in New Tab Button -->
                    <button class="open-new-tab-btn browser-btn" title="Open in New Tab"><i class="fas fa-external-link-alt"></i></button>
                    
                    <!-- Download Section -->
                    <div class="w-full sm:w-auto flex items-center mt-1 sm:mt-0 sm:ml-2">
                        <input type="text" class="download-url flex-grow rounded-full px-3 py-1 text-sm bg-gray-800 border border-gray-600" placeholder="URL to download...">
                        <button class="download-btn browser-btn ml-1" title="Download"><i class="fas fa-download"></i></button>
                    </div>
                </div>

                <!-- Warning Message -->
                <div class="p-2 bg-yellow-800 text-yellow-200 text-xs text-center">
                    <i class="fas fa-exclamation-triangle mr-1"></i>
                    Many sites block being loaded here. Use the "Open in New Tab" button if a site is blank.
                </div>

                <!-- The main content window for websites -->
                <iframe class="browser-content flex-grow w-full h-full border-0"></iframe>

                <!-- Status bar for downloads -->
                <div class="download-status p-1 bg-blue-900 text-blue-200 text-center text-sm" style="display: none;"></div>
            </div>
        </div>
        <div id="media-player" class="window" style="top: 20%; left: 25%; width: 500px;">
            <div class="title-bar" data-app-id="media-player">
                <span id="media-player-title">Media Player</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="media-player"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="media-player">x</button>
                </div>
            </div>
            <div class="window-content p-2 flex flex-col">
                <video id="media-player-video" class="w-full h-auto max-h-64" poster="https://placehold.co/600x400/1a202c/a9b1d6?text=Willis+Media"></video>
                <div class="bg-gray-800 p-2 rounded-b-md">
                    <div class="flex items-center gap-2">
                        <span id="media-current-time" class="text-xs">0:00</span>
                        <input type="range" id="media-progress-bar" class="w-full" value="0" step="1">
                        <span id="media-total-time" class="text-xs">0:00</span>
                    </div>
                    <div class="flex items-center justify-center gap-4 mt-2">
                        <button id="media-play-pause-btn" class="media-btn"><i class="fas fa-play"></i></button>
                        <div class="flex items-center gap-1">
                            <i class="fas fa-volume-down"></i>
                            <input type="range" id="media-volume-bar" class="w-24" value="1" min="0" max="1" step="0.01">
                            <i class="fas fa-volume-up"></i>
                        </div>
                    </div>
                    <div class="flex items-center gap-2 mt-2">
                        <input type="text" id="media-url-input" class="flex-grow bg-gray-700 text-white px-2 py-1 rounded-md border border-gray-600 text-sm" placeholder="Enter media URL...">
                        <button id="media-load-btn" class="px-3 py-1 bg-blue-600 rounded-md text-sm">Load</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="smash-bros" class="window" style="top: 25%; left: 15%; width: 625px; height: 520px;">
             <div class="title-bar" data-app-id="smash-bros"><span>Super Smash Bros.</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="smash-bros"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="smash-bros">x</button>
                </div>
             </div>
             <div class="window-content p-0"><iframe src="https://www.retrogames.cc/embed/32117-super-smash-bros-usa.html" width="100%" height="100%" frameborder="no" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true" scrolling="no"></iframe></div>
        </div>
        <div id="diddy-kong" class="window" style="top: 35%; left: 25%; width: 625px; height: 520px;">
             <div class="title-bar" data-app-id="diddy-kong"><span>Diddy Kong Racing</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="diddy-kong"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="diddy-kong">x</button>
                </div>
             </div>
             <div class="window-content p-0"><iframe src="https://www.retrogames.cc/embed/32213-diddy-kong-racing-japan.html" width="100%" height="100%" frameborder="no" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true" scrolling="no"></iframe></div>
        </div>
        <div id="netflix" class="window" style="top: 40%; left: 40%; width: 400px; height: 250px;">
            <div class="title-bar" data-app-id="netflix"><span>Netflix</span>
                <div class="window-controls">
                    <button class="maximize-btn" data-app-id="netflix"><svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="4"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg></button>
                    <button class="close-btn" data-app-id="netflix">x</button>
                </div>
            </div>
            <div class="window-content text-center flex flex-col justify-center items-center">
                <p class="mb-4">Due to security restrictions, Netflix must be opened in a new tab.</p>
                <button onclick="window.open('https://www.netflix.com/browse', '_blank')" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">Open Netflix</button>
            </div>
        </div>

        <!-- Taskbar and Start Menu -->
        <div id="taskbar">
            <button id="start-button">
                 <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 3L7.5 21L12 3L16.5 21L21 3" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <div id="taskbar-apps"></div>
            <div id="clock" class="ml-auto text-sm"></div>
        </div>
        <div id="start-menu">
            <div class="start-menu-item" data-app-id="settings">Settings</div>
            <div class="start-menu-item" data-app-id="app-store">App Store</div>
            <div class="start-menu-item" data-app-id="ai-assistant">AI Assistant</div>
            <hr class="border-gray-600 my-1">
            <div class="start-menu-item" data-app-id="explorer">File Explorer</div>
            <div class="start-menu-item" data-app-id="terminal">Terminal</div>
            <div class="start-menu-item" data-app-id="browser">Web Browser</div>
            <div class="start-menu-item" data-app-id="task-manager">Task Manager</div>
            <div class="start-menu-item" data-app-id="media-player">Media Player</div>
            <div class="start-menu-item" data-app-id="devtools">DevTools</div>
        </div>
    </div>

    <script>
        // --- Gemini API Key ---
        const API_KEY = ""; // Leave empty, it will be handled by the environment

        // --- Boot Sequence ---
        function runBootSequence() {
            const bootScreen = document.getElementById('boot-screen');
            const osContainer = document.getElementById('os-container');
            
            setTimeout(() => {
                try {
                    Tone.start().then(() => {
                        const synth = new Tone.Synth().toDestination();
                        synth.triggerAttackRelease("C4", "8n", Tone.now());
                        synth.triggerAttackRelease("G4", "8n", Tone.now() + 0.2);
                    });
                } catch (e) { console.error("Could not play boot sound:", e); }

                bootScreen.style.opacity = '0';
                setTimeout(() => {
                    bootScreen.style.display = 'none';
                    osContainer.classList.remove('hidden');
                }, 1000);
            }, 4000);
        }

        /**
         * Simulates a hierarchical file system.
         */
        const fileSystem = {
            data: {
                '/': {
                    type: 'directory',
                    children: {
                        'home': { type: 'directory', children: {
                            'user': { type: 'directory', children: {
                                'Documents': { type: 'directory', children: {
                                    'Welcome.txt': { type: 'file', content: 'Welcome to Willis OS v2.0!' }
                                }},
                                'Downloads': { type: 'directory', children: {} },
                                'Music': { type: 'directory', children: {
                                    'sample.mp3': { type: 'file', content: 'https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3' }
                                }},
                                'Videos': { type: 'directory', children: {
                                    'cod_zombies.mp4': { type: 'file', content: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm' }
                                }},
                            }}
                        }},
                        'bin': { type: 'directory', children: {} },
                        'etc': { type: 'directory', children: {} },
                    }
                }
            },
            getNode: function(path) {
                const parts = path.split('/').filter(p => p);
                let current = this.data['/'];
                if (path === '/') return current;
                for (const part of parts) {
                    if (current && current.type === 'directory' && current.children[part]) {
                        current = current.children[part];
                    } else { return null; }
                }
                return current;
            }
        };

        /**
         * Manages all desktop, window, and app interactions.
         */
        const desktopManager = {
            highestZ: 100,
            openApps: new Set(),
            init: function() {
                this.taskbarAppsEl = document.getElementById('taskbar-apps');
                this.startMenuEl = document.getElementById('start-menu');
                this.initEventListeners();
                document.querySelectorAll('.window').forEach(el => this.makeDraggable(el));
            },
            initEventListeners: function() {
                document.getElementById('start-button').addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.toggleStartMenu();
                });
                document.addEventListener('click', (e) => {
                    if (!this.startMenuEl.contains(e.target) && e.target.closest('#start-button') === null) {
                        this.startMenuEl.style.display = 'none';
                    }
                });
                document.querySelectorAll('.desktop-icon, .start-menu-item, .app-launcher').forEach(el => {
                    el.addEventListener(el.classList.contains('desktop-icon') ? 'dblclick' : 'click', () => this.openApp(el.dataset.appId));
                });
                document.querySelectorAll('.close-btn').forEach(button => {
                    button.addEventListener('click', () => this.closeApp(button.dataset.appId));
                });
                document.querySelectorAll('.maximize-btn').forEach(button => {
                    button.addEventListener('click', () => this.toggleFullscreen(button.dataset.appId));
                });
            },
            toggleStartMenu: function() {
                this.startMenuEl.style.display = this.startMenuEl.style.display === 'block' ? 'none' : 'block';
            },
            openApp: function(appId, context = null) {
                const appWindow = document.getElementById(appId);
                if (!appWindow) return;
                appWindow.style.display = 'flex';
                this.bringToFront(appId);
                if (!this.openApps.has(appId)) {
                    this.openApps.add(appId);
                    const taskbarIcon = document.createElement('div');
                    taskbarIcon.id = `taskbar-${appId}`;
                    taskbarIcon.className = 'taskbar-icon';
                    taskbarIcon.textContent = appId.charAt(0).toUpperCase() + appId.slice(1).replace('-', ' ');
                    taskbarIcon.onclick = () => this.bringToFront(appId);
                    this.taskbarAppsEl.appendChild(taskbarIcon);
                }
                this.updateActiveTaskbarIcon();
                if (this.startMenuEl.style.display === 'block') this.toggleStartMenu();
                if (appId === 'notepad' && context?.filePath) appLogic.notepad.openFile(context.filePath);
                if (appId === 'explorer') appLogic.explorer.render('/home/user');
                if (appId === 'task-manager') appLogic.taskManager.render();
                if (appId === 'browser') appLogic.browser.onOpen();
                if (appId === 'terminal') appLogic.terminal.focus();
                if (appId === 'media-player') appLogic.mediaPlayer.onOpen(context);
                if (appId === 'devtools') appLogic.devtools.onOpen();
            },
            closeApp: function(appId) {
                document.getElementById(appId).style.display = 'none';
                this.openApps.delete(appId);
                const taskbarIcon = document.getElementById(`taskbar-${appId}`);
                if (taskbarIcon) taskbarIcon.remove();
                this.updateActiveTaskbarIcon();
            },
            bringToFront: function(appId) {
                document.getElementById(appId).style.zIndex = ++this.highestZ;
                this.updateActiveTaskbarIcon();
            },
            updateActiveTaskbarIcon: function() {
                let topApp = null, maxZ = 0;
                this.openApps.forEach(appId => {
                    const win = document.getElementById(appId);
                    const z = parseInt(win.style.zIndex) || 0;
                    if (z >= maxZ) { maxZ = z; topApp = appId; }
                });
                document.querySelectorAll('.taskbar-icon').forEach(icon => {
                    icon.classList.toggle('active', icon.id === `taskbar-${topApp}`);
                });
            },
            makeDraggable: function(windowEl) {
                const titleBar = windowEl.querySelector('.title-bar');
                if (!titleBar) return;
                titleBar.onmousedown = (e) => {
                    if (e.target.classList.contains('window-controls') || e.target.closest('.window-controls')) return;
                    if (windowEl.classList.contains('fullscreen')) return;

                    this.bringToFront(windowEl.id);
                    let offsetX = e.clientX - windowEl.offsetLeft, offsetY = e.clientY - windowEl.offsetTop;
                    const onMouseMove = (e) => {
                        windowEl.style.left = `${e.clientX - offsetX}px`;
                        windowEl.style.top = `${e.clientY - offsetY}px`;
                    };
                    const onMouseUp = () => document.removeEventListener('mousemove', onMouseMove);
                    document.addEventListener('mousemove', onMouseMove);
                    document.addEventListener('mouseup', onMouseUp, { once: true });
                };
            },
            toggleFullscreen: function(appId) {
                const windowEl = document.getElementById(appId);
                if (!windowEl) return;

                if (windowEl.classList.contains('fullscreen')) {
                    windowEl.classList.remove('fullscreen');
                    windowEl.style.top = windowEl.dataset.originalTop;
                    windowEl.style.left = windowEl.dataset.originalLeft;
                    windowEl.style.width = windowEl.dataset.originalWidth;
                    windowEl.style.height = windowEl.dataset.originalHeight;
                } else {
                    windowEl.dataset.originalTop = windowEl.style.top;
                    windowEl.dataset.originalLeft = windowEl.style.left;
                    windowEl.dataset.originalWidth = windowEl.style.width;
                    windowEl.dataset.originalHeight = windowEl.style.height;
                    windowEl.classList.add('fullscreen');
                }
            }
        };

        const appLogic = {
            init: function() {
                this.explorer.init(); this.notepad.init(); this.terminal.init(); this.taskManager.init(); this.browser.init(); this.mediaPlayer.init(); this.devtools.init();
                document.getElementById('submit-ai-prompt-btn').addEventListener('click', () => this.ai.submit());
                document.getElementById('generate-wallpaper-btn').addEventListener('click', () => this.settings.generateWallpaper());
                document.getElementById('set-wallpaper-btn').addEventListener('click', () => this.settings.setWallpaper());
            },
            explorer: {
                currentPath: '/home/user',
                init: function() {},
                render: function(path) {
                    this.currentPath = path;
                    const node = fileSystem.getNode(path);
                    const contentEl = document.getElementById('explorer-content');
                    document.getElementById('explorer-title').textContent = `Explorer - ${path}`;
                    contentEl.innerHTML = '';
                    if (node?.type === 'folder') {
                        const parentPath = path.substring(0, path.lastIndexOf('/')) || '/';
                        if (path !== '/') {
                            const upEl = document.createElement('div');
                            upEl.className = 'file-explorer-item';
                            upEl.innerHTML = `<span>.. (Up)</span>`;
                            upEl.onclick = () => this.render(parentPath);
                            contentEl.appendChild(upEl);
                        }
                        for (const name in node.children) {
                            const child = node.children[name];
                            const itemEl = document.createElement('div');
                            itemEl.className = 'file-explorer-item';
                            itemEl.innerHTML = `<span>${child.type === 'folder' ? '📁' : '📄'} ${name}</span>`;
                            const fullPath = `${path === '/' ? '' : path}/${name}`;
                            if (child.type === 'folder') itemEl.ondblclick = () => this.render(fullPath);
                            else if (name.endsWith('.txt')) itemEl.ondblclick = () => desktopManager.openApp('notepad', { filePath: fullPath });
                            else if (name.endsWith('.mp3') || name.endsWith('.mp4') || name.endsWith('.webm')) itemEl.ondblclick = () => desktopManager.openApp('media-player', { filePath: fullPath });
                            contentEl.appendChild(itemEl);
                        }
                    }
                }
            },
            notepad: {
                currentFile: null,
                init: function() { 
                    document.getElementById('notepad-save-btn').addEventListener('click', () => this.saveFile()); 
                    document.getElementById('notepad-summarize-btn').addEventListener('click', () => this.summarize());
                    document.getElementById('notepad-continue-btn').addEventListener('click', () => this.continueWriting());
                },
                openFile: function(path) {
                    const node = fileSystem.getNode(path);
                    if (node?.type === 'file') {
                        this.currentFile = path;
                        document.getElementById('notepad-title').textContent = `Notepad - ${path.split('/').pop()}`;
                        document.getElementById('notepad-textarea').value = node.content;
                    }
                },
                saveFile: function() {
                    if (this.currentFile) {
                        const node = fileSystem.getNode(this.currentFile);
                        if (node) {
                            node.content = document.getElementById('notepad-textarea').value;
                            alert('File saved!');
                        }
                    }
                },
                summarize: async function() {
                    const textarea = document.getElementById('notepad-textarea');
                    const text = textarea.value;
                    if (!text) return;
                    const prompt = `Summarize the following text:\n\n${text}`;
                    textarea.value = "✨ Summarizing...";
                    const summary = await callGemini(prompt);
                    textarea.value = summary;
                },
                continueWriting: async function() {
                    const textarea = document.getElementById('notepad-textarea');
                    const text = textarea.value;
                    if (!text) return;
                    const prompt = `Continue writing the following text:\n\n${text}`;
                    textarea.value += "\n\n✨ Thinking...";
                    const continuation = await callGemini(prompt);
                    textarea.value = text + continuation;
                }
            },
            terminal: {
                currentPath: '/home/user',
                commandHistory: [],
                historyIndex: -1,
                init: function() {
                    this.outputEl = document.getElementById('terminal-output');
                    this.inputEl = document.getElementById('terminal-input');
                    this.pathEl = document.getElementById('terminal-path');
                    this.updatePrompt();
                    this.inputEl.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter') this.handleEnter(e);
                        else if (e.key === 'ArrowUp') this.handleArrowUp(e);
                        else if (e.key === 'ArrowDown') this.handleArrowDown(e);
                        else if (e.key === 'Tab') this.handleTab(e);
                    });
                    this.log('Welcome to Willis OS Terminal!');
                    this.log('Type `help` for a list of commands.');
                },
                focus: function() { this.inputEl.focus(); },
                updatePrompt: function() { this.pathEl.textContent = this.currentPath.replace('/home/user', '~') || '/'; },
                handleEnter: function(e) {
                    e.preventDefault();
                    const fullCommand = this.inputEl.value.trim();
                    if (fullCommand) {
                        this.logCommand(fullCommand);
                        this.commandHistory.unshift(fullCommand);
                        this.historyIndex = -1;
                        const [command, ...args] = fullCommand.split(/\s+/);
                        if (this.commands[command]) {
                            this.commands[command](args, this);
                        } else {
                            this.log(`${command}: command not found`);
                        }
                    } else {
                        this.logCommand('');
                    }
                    this.inputEl.value = '';
                },
                handleArrowUp: function(e) {
                    e.preventDefault();
                    if (this.historyIndex < this.commandHistory.length - 1) {
                        this.historyIndex++;
                        this.inputEl.value = this.commandHistory[this.historyIndex];
                    }
                },
                handleArrowDown: function(e) {
                    e.preventDefault();
                    if (this.historyIndex > 0) {
                        this.historyIndex--;
                        this.inputEl.value = this.commandHistory[this.historyIndex];
                    } else {
                        this.historyIndex = -1;
                        this.inputEl.value = '';
                    }
                },
                handleTab: function(e) {
                    e.preventDefault();
                    const text = this.inputEl.value;
                    const currentDir = fileSystem.getNode(this.currentPath);
                    const entries = Object.keys(currentDir.children);
                    const possibilities = entries.filter(entry => entry.startsWith(text));
                    if (possibilities.length === 1) this.inputEl.value = possibilities[0];
                },
                log: function(message) {
                    this.outputEl.innerHTML += `<div>${message.replace(/ /g, '&nbsp;')}</div>`;
                    this.outputEl.scrollTop = this.outputEl.scrollHeight;
                },
                logCommand: function(command) {
                    const prompt = `<span class="prompt-color">user@willis</span><span class="text-gray-400">:</span><span class="path-color">${this.currentPath.replace('/home/user', '~') || '/'}</span><span class="text-gray-400">$</span>`;
                    this.log(`${prompt} ${command}`);
                },
                resolvePath: function(path) {
                    if (path.startsWith('/')) return path;
                    const newPathParts = this.currentPath.split('/').filter(p => p);
                    path.split('/').filter(p => p).forEach(part => {
                        if (part === '..') { if (newPathParts.length > 0) newPathParts.pop(); }
                        else if (part !== '.') newPathParts.push(part);
                    });
                    return '/' + newPathParts.join('/');
                },
                commands: {
                    help: (args, self) => self.log(`Available commands:<br>  <span class="file">ai [prompt]</span><br>  <span class="file">cat [file]</span><br>  <span class="file">cd [dir]</span><br>  <span class="file">clear</span><br>  <span class="file">date</span><br>  <span class="file">echo [text]</span><br>  <span class="file">help</span><br>  <span class="file">ls [path]</span><br>  <span class="file">mkdir [dir]</span><br>  <span class="file">pwd</span><br>  <span class="file">touch [file]</span><br>  <span class="file">whoami</span><br>  <span class="file">uname</span>`),
                    ls: (args, self) => {
                        const path = args[0] ? self.resolvePath(args[0]) : self.currentPath;
                        const dir = fileSystem.getNode(path);
                        if (dir?.type === 'directory') {
                            const entries = Object.keys(dir.children).sort();
                            if (entries.length === 0) return;
                            let content = entries.map(entry => `<span class="${dir.children[entry].type === 'directory' ? 'directory' : 'file'}">${entry}</span>`).join('  ');
                            self.log(content);
                        } else { self.log(`ls: cannot access '${args[0] || '.'}': No such file or directory`); }
                    },
                    cd: (args, self) => {
                        if (!args[0]) { self.currentPath = '/home/user'; }
                        else {
                            const newPath = self.resolvePath(args[0]);
                            const dir = fileSystem.getNode(newPath);
                            if (dir?.type === 'directory') {
                                self.currentPath = newPath === '/' && newPath.length > 1 ? newPath.slice(0, -1) : newPath;
                            } else { self.log(`cd: ${args[0]}: No such file or directory`); }
                        }
                        self.updatePrompt();
                    },
                    pwd: (args, self) => self.log(self.currentPath || '/'),
                    cat: (args, self) => {
                        if (!args[0]) { self.log(`cat: missing operand`); return; }
                        const path = self.resolvePath(args[0]);
                        const file = fileSystem.getNode(path);
                        if (file?.type === 'file') self.log(file.content.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, '<br>'));
                        else if (file?.type === 'directory') self.log(`cat: ${args[0]}: Is a directory`);
                        else self.log(`cat: ${args[0]}: No such file or directory`);
                    },
                    echo: (args, self) => self.log(args.join(' ').replace(/</g, "&lt;").replace(/>/g, "&gt;")),
                    mkdir: (args, self) => {
                        if (!args[0]) { self.log('mkdir: missing operand'); return; }
                        const parentDir = fileSystem.getNode(self.currentPath);
                        if (parentDir.children[args[0]]) self.log(`mkdir: cannot create directory ‘${args[0]}’: File exists`);
                        else parentDir.children[args[0]] = { type: 'directory', children: {} };
                    },
                    touch: (args, self) => {
                        if (!args[0]) { self.log('touch: missing operand'); return; }
                        const parentDir = fileSystem.getNode(self.currentPath);
                        if (!parentDir.children[args[0]]) parentDir.children[args[0]] = { type: 'file', content: '' };
                    },
                    clear: (args, self) => self.outputEl.innerHTML = '',
                    date: (args, self) => self.log(new Date().toString()),
                    whoami: (args, self) => self.log('user'),
                    uname: (args, self) => self.log('WillisOS (Web)'),
                    sudo: (args, self) => self.log('user is not in the sudoers file. This incident will be reported.'),
                    ai: async (args, self) => {
                        const prompt = args.join(' ');
                        if (!prompt) { self.log('Usage: ai [your question]'); return; }
                        self.log('✨ Thinking...');
                        const response = await callGemini(prompt);
                        self.log(response);
                    }
                }
            },
            taskManager: {
                init: function() {},
                render: function() {
                    const contentEl = document.getElementById('task-manager-content');
                    contentEl.innerHTML = '';
                    desktopManager.openApps.forEach(appId => {
                        const itemEl = document.createElement('div');
                        itemEl.className = 'flex justify-between items-center p-2 hover:bg-gray-600';
                        itemEl.innerHTML = `<span>${appId}</span><button data-app-id="${appId}" class="px-2 py-1 bg-red-600 rounded text-xs">End Task</button>`;
                        itemEl.querySelector('button').onclick = () => desktopManager.closeApp(appId);
                        contentEl.appendChild(itemEl);
                    });
                }
            },
            browser: {
                init: function() {},
                onOpen: function() {
                    const windowEl = document.getElementById('browser');
                    const iframe = windowEl.querySelector('.browser-content');
                    const urlInput = windowEl.querySelector('.browser-url');
                    const reloadBtn = windowEl.querySelector('.browser-reload');
                    const backBtn = windowEl.querySelector('.browser-back');
                    const forwardBtn = windowEl.querySelector('.browser-forward');
                    const newTabBtn = windowEl.querySelector('.open-new-tab-btn');
                    const downloadBtn = windowEl.querySelector('.download-btn');
                    const downloadUrlInput = windowEl.querySelector('.download-url');
                    const downloadStatus = windowEl.querySelector('.download-status');

                    const navigateTo = (url) => {
                        if (!url.startsWith('http')) url = 'https://' + url;
                        iframe.src = url;
                        urlInput.value = url;
                    };
                    
                    urlInput.onkeypress = (e) => { if (e.key === 'Enter') navigateTo(urlInput.value); };
                    reloadBtn.onclick = () => iframe.contentWindow.location.reload();
                    backBtn.onclick = () => iframe.contentWindow.history.back();
                    forwardBtn.onclick = () => iframe.contentWindow.history.forward();
                    newTabBtn.onclick = () => { if(urlInput.value) window.open(urlInput.value, '_blank'); };
                    
                    downloadBtn.onclick = () => {
                        const url = downloadUrlInput.value;
                        if (!url) {
                            downloadStatus.textContent = 'Please enter a URL to download.';
                            downloadStatus.style.display = 'block';
                            setTimeout(() => downloadStatus.style.display = 'none', 3000);
                            return;
                        }

                        downloadStatus.textContent = 'Initiating download...';
                        downloadStatus.style.display = 'block';

                        try {
                            const a = document.createElement('a');
                            const filename = url.substring(url.lastIndexOf('/') + 1).split('?')[0] || 'download';
                            a.href = url;
                            a.target = '_blank'; 
                            a.download = filename;
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            downloadStatus.textContent = `Download for '${filename}' initiated.`;
                            
                            const downloadsFolder = fileSystem.getNode('/home/user/Downloads');
                            if (downloadsFolder) {
                                downloadsFolder.children[filename] = {
                                    type: 'file',
                                    content: `[Downloaded from: ${url} at ${new Date().toLocaleString()}]`
                                };
                            }
                        } catch (error) {
                            console.error('Download initiation failed:', error);
                            downloadStatus.textContent = `Could not initiate download.`;
                        } finally {
                            setTimeout(() => { if (downloadStatus) downloadStatus.style.display = 'none'; }, 5000);
                        }
                    };
                    
                    navigateTo(urlInput.value);
                }
            },
            mediaPlayer: {
                videoEl: null,
                playPauseBtn: null,
                progressEl: null,
                volumeEl: null,
                init: function() {},
                onOpen: function(context) {
                    const windowEl = document.getElementById('media-player');
                    this.videoEl = windowEl.querySelector('#media-player-video');
                    this.playPauseBtn = windowEl.querySelector('#media-play-pause-btn');
                    this.progressEl = windowEl.querySelector('#media-progress-bar');
                    this.volumeEl = windowEl.querySelector('#media-volume-bar');
                    const currentTimeEl = windowEl.querySelector('#media-current-time');
                    const totalTimeEl = windowEl.querySelector('#media-total-time');
                    const loadBtn = windowEl.querySelector('#media-load-btn');
                    const urlInput = windowEl.querySelector('#media-url-input');

                    // Reset and attach listeners
                    this.videoEl.onplay = () => this.playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    this.videoEl.onpause = () => this.playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                    this.videoEl.ontimeupdate = () => {
                        this.progressEl.value = this.videoEl.currentTime;
                        currentTimeEl.textContent = this.formatTime(this.videoEl.currentTime);
                    };
                    this.videoEl.onloadedmetadata = () => {
                        this.progressEl.max = this.videoEl.duration;
                        totalTimeEl.textContent = this.formatTime(this.videoEl.duration);
                    };

                    this.playPauseBtn.onclick = () => this.videoEl.paused ? this.videoEl.play() : this.videoEl.pause();
                    this.volumeEl.oninput = (e) => this.videoEl.volume = e.target.value;
                    this.progressEl.oninput = (e) => this.videoEl.currentTime = e.target.value;
                    loadBtn.onclick = () => this.loadMedia(urlInput.value);

                    if (context?.filePath) {
                        const node = fileSystem.getNode(context.filePath);
                        if (node?.type === 'file') {
                            this.loadMedia(node.content);
                            document.getElementById('media-player-title').textContent = `Media Player - ${context.filePath.split('/').pop()}`;
                        }
                    } else {
                        // Clear previous media if opening fresh
                        this.videoEl.src = '';
                        document.getElementById('media-player-title').textContent = 'Media Player';
                    }
                },
                loadMedia: function(url) {
                    if (this.videoEl && url) {
                        this.videoEl.src = url;
                        this.videoEl.play();
                    }
                },
                formatTime: function(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60);
                    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
                }
            },
            ai: {
                conversationHistory: [],
                submit: async function() {
                    const aiPromptInput = document.getElementById('ai-prompt-input');
                    const aiResponseArea = document.getElementById('ai-response-area');
                    const aiLoadingSpinner = document.getElementById('ai-loading-spinner');
                    const prompt = aiPromptInput.value;
                    if(!prompt) return;

                    this.conversationHistory.push({ role: "user", parts: [{ text: prompt }] });
                    this.renderHistory();
                    
                    aiLoadingSpinner.style.display = 'block';
                    aiPromptInput.disabled = true;
                    aiPromptInput.value = '';

                    const responseText = await callGemini(this.conversationHistory);
                    
                    this.conversationHistory.push({ role: "model", parts: [{ text: responseText }] });
                    this.renderHistory();

                    aiLoadingSpinner.style.display = 'none';
                    aiPromptInput.disabled = false;
                    aiPromptInput.focus();
                },
                renderHistory: function() {
                    const aiResponseArea = document.getElementById('ai-response-area');
                    aiResponseArea.innerHTML = '';
                    this.conversationHistory.forEach(turn => {
                        const messageEl = document.createElement('div');
                        messageEl.className = turn.role === 'user' ? 'user-message' : 'ai-message';
                        messageEl.textContent = turn.parts[0].text;
                        aiResponseArea.appendChild(messageEl);
                    });
                    aiResponseArea.scrollTop = aiResponseArea.scrollHeight;
                }
            },
            settings: {
                generateWallpaper: async function() {
                    const wallpaperInput = document.getElementById('wallpaper-input');
                    const description = wallpaperInput.value;
                    if (!description) return;
                    const btn = document.getElementById('generate-wallpaper-btn');
                    btn.disabled = true; btn.innerText = 'Generating...';
                    const prompt = `Find a high-res wallpaper URL for: "${description}". Use a source like Unsplash. Return only JSON like {"imageUrl": "..."}.`;
                    const jsonResponse = await callGemini(prompt, true);
                    try {
                        const parsed = JSON.parse(jsonResponse);
                        if(parsed.imageUrl) {
                            wallpaperInput.value = parsed.imageUrl;
                            this.setWallpaper();
                        } else { wallpaperInput.value = 'Could not find an image.'; }
                    } catch (e) { wallpaperInput.value = 'Error parsing response.'; }
                    btn.disabled = false; btn.innerHTML = '✨ Generate';
                },
                setWallpaper: function() {
                    const wallpaperInput = document.getElementById('wallpaper-input');
                    const newWallpaperUrl = wallpaperInput.value;
                    if (newWallpaperUrl) {
                        const img = new Image();
                        img.src = newWallpaperUrl;
                        img.onload = () => document.getElementById('desktop').style.backgroundImage = `url('${newWallpaperUrl}')`;
                        img.onerror = () => alert('Invalid image URL.');
                    }
                }
            }
        };

        // Helper function to call Gemini API
        async function callGemini(promptOrHistory, isJson = false) {
             const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`;
             const payload = {
                 contents: Array.isArray(promptOrHistory) ? promptOrHistory : [{ role: "user", parts: [{ text: promptOrHistory }] }]
             };
              if(isJson) {
                 payload.generationConfig = {
                     responseMimeType: "application/json",
                     responseSchema: { type: "OBJECT", properties: { "imageUrl": { "type": "STRING" } } }
                 }
             }
             try {
                 const response = await fetch(apiUrl, {
                     method: 'POST',
                     headers: { 'Content-Type': 'application/json' },
                     body: JSON.stringify(payload)
                 });
                 if (!response.ok) throw new Error(`API call failed: ${response.status}`);
                 const result = await response.json();
                 return result.candidates?.[0]?.content?.parts?.[0]?.text || "Sorry, I couldn't get a response.";
             } catch (error) {
                 console.error("Error calling Gemini API:", error);
                 return `Error: ${error.message}`;
             }
        }
        
        // --- System Initialization ---
        window.onload = () => {
            runBootSequence();
            desktopManager.init();
            appLogic.init();
            
            const clockEl = document.getElementById('clock');
            function updateClock() {
                clockEl.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            setInterval(updateClock, 1000);
            updateClock();
        };
    </script>
</body>
</html>
